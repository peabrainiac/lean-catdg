import Mathlib.CategoryTheory.ConcreteCategory.BundledHom
import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.Limits.Preserves.Basic
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.Topology.Category.TopCat.Basic
import Orbifolds.Diffeology.DDiffeomorph
import Orbifolds.Diffeology.Continuous
import Orbifolds.ForMathlib.DeltaGenerated

/-!
# Category of diffeological spaces
The category of diffeological spaces and smooth maps.
Adapted from `Mathlib.Topology.Category.TopCat.Basic`.

Main definitions / results:
* `DiffSp`: the category of diffeological spaces and smooth maps.
* `forget DiffSp`: the forgetful functor `DiffSp ‚•§ Type`,
  provided through a `ConcreteCategory`-instance on `DiffSp`.
* `DiffSp.discrete`, `DiffSp.indiscrete`: the functors `Type ‚•§ DiffSp` giving each type the
  discrete/indiscrete diffeology.
* `DiffSp.discreteForgetAdj`, `DiffSp.forgetIndiscreteAdj`: the adjunctions
  `discrete ‚ä£ forget ‚ä£ indiscrete`.
* `DiffSp.dTop`, `DiffSp.diffToDeltaGenerated`, `DiffSp.topToDiff`,
  `DiffSp.deltaGeneratedToDiff`: the functors between `DiffSp`, `DeltaGenerated` and
  `TopCat` given by the D-topology and continuous diffeology.
* `DiffSp.dTopAdj`, `DiffSp.dTopAdj'`: the adjunctions between those.
* `DiffSp.hasLimits`, `DiffSp.hasColimits`: `DiffSp` is complete and cocomplete.
* `DiffSp.forgetPreservesLimits`, `DiffSp.forgetPreservesColimits`: the forgetful functor
  `DiffSp ‚•§ Type` preserves limits and colimits.
-/

open CategoryTheory

open Topology

universe u v

/-!
### DiffSp

Basic definitions and lemmas about the category of diffeological spaces.
-/

section Basic

@[to_additive existing DiffSp]
def DiffSp : Type (u + 1) :=
  Bundled DiffeologicalSpace

namespace DiffSp

instance bundledHom : BundledHom @DSmoothMap where
  toFun := @DSmoothMap.toFun
  id := @DSmoothMap.id
  comp := @DSmoothMap.comp

deriving instance LargeCategory for DiffSp

instance concreteCategory : ConcreteCategory DiffSp :=
  inferInstanceAs <| ConcreteCategory (Bundled DiffeologicalSpace)

instance : CoeSort DiffSp Type* where
  coe X := X.Œ±

instance topologicalSpaceUnbundled (X : DiffSp) : DiffeologicalSpace X :=
  X.str

instance instFunLike (X Y : DiffSp) : FunLike (X ‚ü∂ Y) X Y :=
  inferInstanceAs <| FunLike (DSmoothMap X Y) X Y

-- TODO DSmoothMapClass-Instanz

lemma id_app (X : DiffSp) (x : ‚ÜëX) : (ùüô X : X ‚ü∂ X) x = x := rfl

lemma comp_app {X Y Z : DiffSp} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
    (f ‚â´ g : X ‚Üí Z) x = g (f x) := rfl

@[simp]
lemma coe_id (X : DiffSp) : (ùüô X : X ‚Üí X) = id := rfl

@[simp]
lemma coe_comp {X Y Z : DiffSp} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl

@[simp]
lemma hom_inv_id_apply {X Y : DiffSp} (f : X ‚âÖ Y) (x : X) : f.inv (f.hom x) = x :=
  DFunLike.congr_fun f.hom_inv_id x

@[simp]
lemma inv_hom_id_apply {X Y : DiffSp} (f : X ‚âÖ Y) (y : Y) : f.hom (f.inv y) = y :=
  DFunLike.congr_fun f.inv_hom_id y

/-- Construct a bundled space from the underlying type and the typeclass. -/
def of (X : Type u) [DiffeologicalSpace X] : DiffSp :=
  ‚ü®X, inferInstance‚ü©

@[instance] abbrev diffeologicalSpace_forget
    (X : DiffSp) : DiffeologicalSpace <| (forget DiffSp).obj X :=
  X.str

@[simp]
theorem coe_of (X : Type u) [DiffeologicalSpace X] : (of X : Type u) = X := rfl

-- TODO `coe_of_of`?

instance inhabited : Inhabited DiffSp :=
  ‚ü®Empty,‚ä•‚ü©

/-- The functor equipping each type with the discrete diffeology. -/
def discrete : Type u ‚•§ DiffSp.{u} where
  obj X := ‚ü®X,‚ä•‚ü©
  map f := ‚ü®f,dsmooth_bot‚ü©

/-- The functor equipping each type with the indiscrete diffeology. -/
def indiscrete : Type u ‚•§ DiffSp.{u} where
  obj X := ‚ü®X,‚ä§‚ü©
  map f := ‚ü®f,dsmooth_top‚ü©

/-- Adjunction `discrete ‚ä£ forget`, adapted from
  `Mathlib.Topology.Category.TopCat.Adjunctions`. -/
@[simps! unit counit]
def discreteForgetAdj : discrete ‚ä£ forget DiffSp.{u} :=
  Adjunction.mkOfUnitCounit
    { unit := { app := fun X => id }
      counit := { app := fun X => ‚ü®id, dsmooth_bot‚ü© } }

/-- Adjunction `forget ‚ä£ indiscrete`, adapted from
  `Mathlib.Topology.Category.TopCat.Adjunctions`. -/
@[simps! unit counit]
def forgetIndiscreteAdj : forget DiffSp.{u} ‚ä£ indiscrete :=
  Adjunction.mkOfUnitCounit
    { unit := { app := fun X => ‚ü®id, dsmooth_top‚ü© }
      counit := { app := fun X => id } }

instance : Functor.IsRightAdjoint (forget DiffSp.{u}) :=
  ‚ü®_, ‚ü®discreteForgetAdj‚ü©‚ü©

instance : Functor.IsLeftAdjoint (forget DiffSp.{u}) :=
  ‚ü®_, ‚ü®forgetIndiscreteAdj‚ü©‚ü©

/-- The functor sending each diffeological spaces to its D-topology. -/
def dTop : DiffSp.{u} ‚•§ TopCat.{u} where
  obj X := ‚ü®X,DTop‚ü©
  map f := ‚ü®f,f.dsmooth.continuous‚ü©

/-- The functor sending each diffeological space to its D-topology, as a delta-generated
  space. -/
def diffToDeltaGenerated : DiffSp.{u} ‚•§ DeltaGenerated.{u} where
  obj X := ‚ü®‚ü®X,DTop‚ü©,inferInstance‚ü©
  map f := ‚ü®f,f.dsmooth.continuous‚ü©

/-- The functor equipping each topological space with the continuous diffeology. -/
def topToDiff : TopCat.{u} ‚•§ DiffSp.{u} where
  obj X := of (withContinuousDiffeology X)
  map f := ‚ü®f,f.2.dsmooth‚ü©

/-- The functor equipping each delta-generated space with the continuous diffeology. -/
def deltaGeneratedToDiff : DeltaGenerated.{u} ‚•§ DiffSp.{u} where
  obj X := of (withContinuousDiffeology X)
  map f := ‚ü®f.1,f.2.dsmooth‚ü©

/-- Adjunction between the D-topology and continuous diffeology as functors between
  `DiffSp` and `TopCat`. -/
def dTopAdj : dTop ‚ä£ topToDiff :=
  Adjunction.mkOfUnitCounit {
    unit := { app := fun X => ‚ü®id,dsmooth_id.continuous.dsmooth'‚ü© }
    counit := { app := fun X => ‚ü®id,continuous_iff_coinduced_le.mpr deltaGenerated_le‚ü© } }

/-- Adjunction between the D-topology and continuous diffeology as functors between
  `DiffSp` and `DeltaGenerated`. -/
def dTopAdj' : diffToDeltaGenerated ‚ä£ deltaGeneratedToDiff :=
  Adjunction.mkOfUnitCounit {
    unit := { app := fun X => ‚ü®id,dsmooth_id.continuous.dsmooth'‚ü© }
    counit := { app := fun X => ‚ü®id,continuous_iff_coinduced_le.mpr
      dTop_continuousDiffeology_eq_self.le‚ü© } }

/-- The D-topology functor `DiffSp ‚•§ TopCat` is a left-adjoint. -/
instance : Functor.IsLeftAdjoint (dTop.{u}) :=
  ‚ü®_, ‚ü®dTopAdj‚ü©‚ü©

/-- The D-topology functor `DiffSp ‚•§ DeltaGenerated` is a left-adjoint. -/
instance : Functor.IsLeftAdjoint (diffToDeltaGenerated.{u}) :=
  ‚ü®_, ‚ü®dTopAdj'‚ü©‚ü©

end DiffSp

end Basic

namespace DiffSp

/-!
### Limits and colimits

The category of diffeological spaces is complete and cocomplete, and the forgetful functor
preserves all limits and colimits. Adapted from `Mathlib.Topology.Category.TopCat.Limits`.
-/
section Limits

open CategoryTheory.Limits

variable {J : Type v} [SmallCategory J]

local notation "forget" => forget DiffSp

/-- A specific choice of limit cone for any `F : J ‚•§ DiffSp`. -/
def limitCone (F : J ‚•§ DiffSp.{max v u}) : Cone F where
  pt := of { u : (j : J) ‚Üí F.obj j | ‚àÄ {i j : J} (f : i ‚ü∂ j), F.map f (u i) = u j }
  œÄ :=
    { app := fun j => ‚ü®fun u => u.val j,DSmooth.comp (dsmooth_apply _) (dsmooth_subtype_val)‚ü©
      naturality := fun X Y f => by
        dsimp [Category.id_comp]
        exact DSmoothMap.ext fun a => (a.2 f).symm }

/-- `DiffSp.limitCone F` is actually a limit cone for the given `F : J ‚•§ DiffSp`. -/
def limitConeIsLimit (F : J ‚•§ DiffSp.{max v u}) : IsLimit (limitCone.{u,v} F) where
  lift S :=
    ‚ü®fun x => ‚ü®fun j => S.œÄ.app _ x, fun f => by dsimp; exact S.w f ‚ñ∏ rfl‚ü©,
    DSmooth.subtype_mk (dsmooth_pi fun j => (S.œÄ.app j).2) fun x i j f => by
      dsimp; exact S.w f ‚ñ∏ rfl‚ü©
  fac S j := by dsimp [limitCone]; rfl
  uniq S m h := DSmoothMap.ext fun a => Subtype.ext <| by simp_rw [‚Üê h]; rfl

instance hasLimitsOfSize : HasLimitsOfSize.{v,v} DiffSp.{max u v} where
  has_limits_of_shape _ := ‚ü®fun F => HasLimit.mk ‚ü®limitCone.{u,v} F,limitConeIsLimit F‚ü©‚ü©

/-- `DiffSp` has all limits, i.e. it is complete. -/
instance hasLimits : HasLimits DiffSp.{u} :=
  hasLimitsOfSize.{u,u}

noncomputable instance forgetPreservesLimitsOfSize : PreservesLimitsOfSize forget :=
  ‚ü®‚ü®fun {F} => preservesLimitOfPreservesLimitCone (limitConeIsLimit.{u,v} F)
      (Types.limitConeIsLimit.{v,u} (F ‚ãô forget))‚ü©‚ü©

/-- The forgetful functor `DiffSp ‚•§ Type` preserves all limits. -/
noncomputable instance forgetPreservesLimits : PreservesLimits forget :=
  forgetPreservesLimitsOfSize.{u,u}

/-- A specific choice of colimit cocone for any `F : J ‚•§ DiffSp`. -/
noncomputable def colimitCocone (F : J ‚•§ DiffSp.{max v u}) : Cocone F where
  pt := ‚ü®(Types.TypeMax.colimitCocone.{v,u} (F ‚ãô forget)).pt,
          ‚®Ü j, (F.obj j).str.coinduced ((Types.TypeMax.colimitCocone (F ‚ãô forget)).Œπ.app j)‚ü©
  Œπ :=
    { app := fun j =>
        ‚ü®(Types.TypeMax.colimitCocone (F ‚ãô forget)).Œπ.app j, dsmooth_iff_coinduced_le.mpr <|
          le_iSup (fun j => DiffeologicalSpace.coinduced
            ((Types.TypeMax.colimitCocone (F ‚ãô forget)).Œπ.app j) (F.obj j).str) j‚ü©
      naturality := fun _ _ f =>
        DSmoothMap.coe_injective ((Types.TypeMax.colimitCocone (F ‚ãô forget)).Œπ.naturality f) }


/-- `DiffSp.colimitCocone F` is actually a colimit cocone for the given `F : J ‚•§ DiffSp`. -/
def colimitCoconeIsColimit (F : J ‚•§ DiffSp.{max v u}) : IsColimit (colimitCocone F) := by
  refine IsColimit.ofFaithful forget (Types.TypeMax.colimitCoconeIsColimit.{v,u} _) (fun s =>
      ‚ü®Quot.lift (fun p => (Functor.mapCocone forget s).Œπ.app p.fst p.snd) ?_, ?_‚ü©) fun s => rfl
  ¬∑ intro _ _ ‚ü®_, h‚ü©; simp [h,‚Üêcomp_apply',s.Œπ.naturality]
  ¬∑ exact dsmooth_iff_le_induced.mpr
      (iSup_le fun j => DiffeologicalSpace.coinduced_le_iff_le_induced.mp <|
        DiffeologicalSpace.coinduced_compose.symm ‚ñ∏ (s.Œπ.app j).dsmooth.coinduced_le)

instance hasColimitsOfSize : HasColimitsOfSize.{v,v} DiffSp.{max v u} where
  has_colimits_of_shape _ := ‚ü®fun F => HasColimit.mk ‚ü®colimitCocone F,colimitCoconeIsColimit F‚ü©‚ü©

/-- `DiffSp` has all colimits, i.e. it is cocomplete. -/
instance hasColimits : HasColimits DiffSp.{u} :=
  hasColimitsOfSize.{u,u}

noncomputable instance forgetPreservesColimitsOfSize : PreservesColimitsOfSize forget :=
  ‚ü®‚ü®fun {F} => preservesColimitOfPreservesColimitCocone (colimitCoconeIsColimit.{u,v} F)
    (Types.TypeMax.colimitCoconeIsColimit.{v,u} (F ‚ãô forget))‚ü©‚ü©

/-- The forgetful functor `DiffSp ‚•§ Type` preserves all colimits. -/
noncomputable instance forgetPreservesColimits : PreservesColimits forget :=
  forgetPreservesColimitsOfSize.{u,u}

end Limits

/-!
### Products
Products in `DiffSp` are given by the usual products of spaces.
Adapted from `Mathlib.CategoryTheory.Limits.Shapes.Types`.
-/
section BinaryProducts

open Limits WalkingPair

/-- The product space `X √ó Y` as a cone. -/
def binaryProductCone (X Y : DiffSp.{u}) : BinaryFan X Y :=
  BinaryFan.mk (P := of (X √ó Y)) ‚ü®_,dsmooth_fst‚ü© ‚ü®_,dsmooth_snd‚ü©

/-- `DiffSp.binaryProductCone X Y` is actually a limiting cone. -/
def binaryProductLimit (X Y : DiffSp.{u}) : IsLimit (binaryProductCone X Y) where
  lift (s : BinaryFan X Y) := ‚ü®_,s.fst.dsmooth.prod_mk s.snd.dsmooth‚ü©
  fac _ j := Discrete.recOn j fun j => by cases' j <;> rfl
  uniq s f w := DSmoothMap.ext fun x => Prod.ext
    (congrFun (congrArg DSmoothMap.toFun (w ‚ü®left‚ü©)) x)
    (congrFun (congrArg DSmoothMap.toFun (w ‚ü®right‚ü©)) x)

/-- The functor taking `X`, `Y` to the product space `X √ó Y`. -/
def binaryProductFunctor : DiffSp.{u} ‚•§ DiffSp.{u} ‚•§ DiffSp.{u} where
  obj X := {
    obj := fun Y => of (X √ó Y)
    map := fun {Y Y'} f => ‚ü®_,dsmooth_id.prod_map f.dsmooth‚ü© }
  map {X Y} f := {
    app := fun Z => ‚ü®_,f.dsmooth.prod_map dsmooth_id‚ü©
    naturality := fun {X' Y'} f' => rfl }
  map_id := fun X => rfl
  map_comp := fun {X Y Z} f g => rfl

/-- The explicit products we defined are naturally isomorphic to the products coming from
  the `HasLimits` instance on DiffSp. This is needed because the `HasLimits`
  instance only stores proof that all limits exist, not the explicit constructions,
  so the products derived from it are picked with the axiom of choice. -/
noncomputable def binaryProductIsoProd : binaryProductFunctor.{u} ‚âÖ (prod.functor) := by
  refine' NatIso.ofComponents (fun X => _) (fun _ => _)
  ¬∑ refine' NatIso.ofComponents (fun Y => _) (fun _ => _)
    ¬∑ exact ((limit.isLimit _).conePointUniqueUpToIso (binaryProductLimit X Y)).symm
    ¬∑ apply Limits.prod.hom_ext <;> simp <;> rfl
  ¬∑ ext : 2; apply Limits.prod.hom_ext <;> simp <;> rfl

end BinaryProducts

section Cartesian

noncomputable instance : MonoidalCategory DiffSp := monoidalOfHasFiniteProducts DiffSp

/-- `DiffSp` is cartesian-closed. -/
noncomputable instance cartesianClosed : CartesianClosed DiffSp.{u} where
  closed X := ‚ü®{
      obj := fun Y => DiffSp.of (DSmoothMap X Y)
      map := fun f => ‚ü®f.comp,DSmoothMap.dsmooth_comp.curry_right‚ü©
    }, by exact (Adjunction.mkOfHomEquiv {
      homEquiv := fun Y Z => (DDiffeomorph.prodComm.comp_right).toEquiv.trans
        (@DDiffeomorph.curry Y X Z _ _ _).toEquiv
      homEquiv_naturality_left_symm := fun _ _ => rfl
      homEquiv_naturality_right := fun _ _ => rfl
    } : Adjunction _ _).ofNatIsoLeft <| binaryProductIsoProd.app X‚ü©

end Cartesian

end DiffSp
