import Mathlib.CategoryTheory.Sites.Limits
import Mathlib.CategoryTheory.Sites.Subsheaf
import Mathlib.CategoryTheory.Topos.Classifier

/-!
# Subobject classifiers in categories of sheaves
In this file we construct a subobject classifier in the category of sheaves of types on any site, as
the sheaf that sends every object to the set of closed sieves on it.
See https://ncatlab.org/nlab/show/subobject+classifier#in_a_sheaf_topos.

For Grothendieck topologies `J ‚â§ K` we also construct comparison maps between the corresponding
subobject classifiers, both viewed as `J`-sheaves.

## Main definitions / results
* `ClosedSieve J X`: the type of `J`-closed sieves on `X`
* `J.Œ©`: the `J`-sheaf sending each `X` to the type of `J`-closed sieves on `X`
* `J.classifier`: the data making `J.Œ©` into a subobject classifier
* `J.Œ©' h`: `K.Œ©` as a `J`-sheaf for `h : J ‚â§ K`
* `J.Œ©InclusionOfLE h`: the inclusion `J.Œ©' h ‚ü∂ J.Œ©` for `h : J ‚â§ K`
* `J.Œ©ProjectionOfLE h`: the projection `J.Œ© ‚ü∂ J.Œ©' h` for `h : J ‚â§ K`
-/

universe u v w u‚ÇÇ v‚ÇÇ

namespace CategoryTheory

open Limits Opposite

variable {C : Type u} [Category.{v} C] (J : GrothendieckTopology C)

/-- A sieve is called `J`-closed if it contains every morphism along which it pulls back to a
`J`-covering sieve, i.e. if it contains every morphism it covers. -/
def Sieve.IsClosed {X : C} (S : Sieve X) : Prop :=
  ‚àÄ Y (f : Y ‚ü∂ X), S.pullback f ‚àà J Y ‚Üí S f

variable {J} in
lemma Sieve.IsClosed.pullback {X : C} {S : Sieve X} (hS : S.IsClosed J) {Y : C} (f : Y ‚ü∂ X) :
    (S.pullback f).IsClosed J :=
  fun _ _ h ‚Ü¶ hS _ _ <| S.pullback_comp ‚ñ∏ h

variable {J} in
lemma Sieve.IsClosed.anti {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C} {S : Sieve X}
    (hS : S.IsClosed K) : S.IsClosed J :=
  fun Y f hf ‚Ü¶ hS Y f <| h _ hf

/-- A sieve on `X` that is `J`-closed in the sense of `Sieve.IsClosed`, i.e. that contains every
morphism along which it pulls back to a `J`-covering sieve. -/
structure ClosedSieve (X : C) extends Sieve X where
  isClosed : toSieve.IsClosed J

initialize_simps_projections ClosedSieve (arrows ‚Üí apply)

namespace ClosedSieve

variable {J}

@[ext]
protected lemma ext {X : C} (S T : ClosedSieve J X) :
    S.toSieve = T.toSieve ‚Üí S = T :=
  S.rec fun S hS ‚Ü¶ T.rec fun T hT h ‚Ü¶ by simpa using h

lemma injective_toSieve {X : C} : (toSieve : ClosedSieve J X ‚Üí Sieve X).Injective := by
  intro S T h; ext1; exact h

instance {X : C} : PartialOrder (ClosedSieve J X) :=
  PartialOrder.lift _ ClosedSieve.injective_toSieve

protected lemma le_def {X : C} {S T : ClosedSieve J X} : S ‚â§ T ‚Üî S.toSieve ‚â§ T.toSieve := Iff.rfl

variable (J) in
/-- The smallest `J`-closed sieve containing a given sieve `S : Sieve X`, given by all morphisms
`f : Y ‚ü∂ X` along which `S` pulls back to a covering sieve, i.e. "all morphisms that `S` covers". -/
@[simps!]
def generate {X : C} (S : Sieve X) : ClosedSieve J X where
  arrows Y f := S.pullback f ‚àà J Y
  downward_closed hf g := S.pullback_comp ‚ñ∏ J.pullback_stable g hf
  isClosed _ _ hf := J.transitive hf _ fun _ _ hg ‚Ü¶ S.pullback_comp ‚ñ∏ hg

lemma generate_le_iff {X : C} (S : Sieve X) (T : ClosedSieve J X) :
    ClosedSieve.generate J S ‚â§ T ‚Üî S ‚â§ T.toSieve :=
  ‚ü®fun h _ _ hf ‚Ü¶ h _ <| J.covering_of_eq_top <| S.pullback_eq_top_of_mem hf,
    fun h _ _ hf ‚Ü¶ T.isClosed _ _ <| J.superset_covering (Sieve.pullback_monotone _ h) hf‚ü©

lemma le_toSieve_generate {X : C} (S : Sieve X) : S ‚â§ (generate J S).toSieve :=
  (generate_le_iff _ _).1 le_rfl

/-- The Galois insertion given by `ClosedSieve.generate : Sieve X ‚Üí ClosedSieve J X`. -/
def giGenerate {X : C} : GaloisInsertion (generate J (X := X)) toSieve where
  gc := generate_le_iff
  le_l_u S _ _ hf := J.covering_of_eq_top <| S.pullback_eq_top_of_mem hf
  choice S hS := ‚ü®S, le_antisymm hS (le_toSieve_generate _) ‚ñ∏ (generate J S).isClosed‚ü©
  choice_eq S hS := by ext1; exact le_antisymm (le_toSieve_generate _) hS

@[simp]
lemma generate_toSieve {X : C} (S : ClosedSieve J X) : generate J S.toSieve = S :=
  giGenerate.l_u_eq S

instance {X : C} : CompleteLattice (ClosedSieve J X) := giGenerate.liftCompleteLattice

@[simps! toSieve]
def pullback {X Y : C} (f : Y ‚ü∂ X) (S : ClosedSieve J X) : ClosedSieve J Y :=
  ‚ü®_, S.isClosed.pullback f‚ü©

@[simp]
lemma pullback_id {X : C} (S : ClosedSieve J X) : S.pullback (ùüô X) = S := by
  ext; simp

lemma pullback_comp {X : C} (S : ClosedSieve J X) {Y Z : C} {f : Y ‚ü∂ X} {g : Z ‚ü∂ Y} :
    S.pullback (g ‚â´ f) = (S.pullback f).pullback g := by
  ext; simp

lemma pullback_monotone {X Y : C} {f : Y ‚ü∂ X} : Monotone (pullback (J := J) f) :=
  fun _ _ h ‚Ü¶ Sieve.pullback_monotone f h

lemma pullback_generate {X : C} (S : Sieve X) {Y : C} (f : Y ‚ü∂ X) :
    pullback f (generate J S) = generate J (S.pullback f) := by
  ext Z g; simp [Sieve.pullback_comp]

/-- The inclusion of `K`-closed sieves into `J`-closed sieves for `J ‚â§ K`. -/
@[simps! toSieve]
def inclusionOfLE {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C} (S : ClosedSieve K X) :
    ClosedSieve J X :=
  ‚ü®_, S.isClosed.anti h‚ü©

/-- The `K`-closed sieve generated by the sieve underlying a `J`-closed sieve. For `J ‚â§ K`, this
is left adjoint to `inclusionOfLE : ClosedSieve K X ‚Üí ClosedSieve J X`. -/
@[simps!]
def toClosedSieve (K : GrothendieckTopology C) {X : C} (S : ClosedSieve J X) :
    ClosedSieve K X :=
  generate K (S.toSieve)

lemma toClosedSieve_le_iff_le_inclusionOfLE {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C}
    (S : ClosedSieve J X) (T : ClosedSieve K X) :
    S.toClosedSieve K ‚â§ T ‚Üî S ‚â§ T.inclusionOfLE h :=
  generate_le_iff _ _

lemma le_inclusionOfLE_toClosedSieve {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C}
    (S : ClosedSieve J X) : S ‚â§ (S.toClosedSieve K).inclusionOfLE h :=
  (toClosedSieve_le_iff_le_inclusionOfLE h _ _).1 le_rfl

/-- The galois insertion given by `inclusionOfLE h : ClosedSieve K X ‚Üí ClosedSieve J X`. -/
def giInclusionOfLE {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C} :
    GaloisInsertion (toClosedSieve K (X := X)) (inclusionOfLE h) where
  gc := toClosedSieve_le_iff_le_inclusionOfLE h
  le_l_u S := (generate_toSieve _).symm.le
  choice S hS := ‚ü®S.toSieve, le_antisymm hS (le_inclusionOfLE_toClosedSieve h _) ‚ñ∏ isClosed _‚ü©
  choice_eq S hS := by ext1; exact le_antisymm (le_inclusionOfLE_toClosedSieve h _) hS

@[simp]
lemma toClosedSieve_inclusionOfLE {K : GrothendieckTopology C} (h : J ‚â§ K) {X : C}
    (S : ClosedSieve K X) : (S.inclusionOfLE h).toClosedSieve K = S :=
  (giInclusionOfLE h).l_u_eq S

end ClosedSieve

/-- A specific choice of subobject classifier in the sheaf topos `Sheaf J (Type max u v)`: the
sheaf that associates to each `X : C` the type of all `J`-closed sieves on `X`. The data that
makes this a subobject classifier can be found in `GrothendieckTopology.classifier`. -/
@[simps! val_obj val_map]
protected def GrothendieckTopology.Œ© : Sheaf J (Type max u v) where
  val := {
    obj X := ClosedSieve J X.unop
    map f S := S.pullback f.unop
    map_id _ := by ext S; simp
    map_comp _ _ := by ext S; rw [unop_comp, S.pullback_comp]; rfl
  }
  cond := by
    rw [isSheaf_iff_isSheaf_of_type]
    intro X S hS T hT
    refine ‚ü®ClosedSieve.generate J <| .bind S fun Y f hf ‚Ü¶ (T f hf).toSieve, ?_, ?_‚ü©
    ¬∑ refine fun Y f hf ‚Ü¶ le_antisymm ?_ ?_
      ¬∑ dsimp; rw [ClosedSieve.pullback_generate, ClosedSieve.generate_le_iff]
        intro Z g ‚ü®W, g', f', hf', hg', h‚ü©
        dsimp only at hg'
        rw [Sieve.mem_iff_pullback_eq_top] at hg' ‚ä¢
        exact (congrArg ClosedSieve.toSieve (hT _ _ hf' hf h)).symm.trans hg'
      ¬∑ refine ClosedSieve.le_def.2 ?_
        refine le_trans ?_ <| Sieve.pullback_monotone f <| ClosedSieve.le_toSieve_generate _
        exact Sieve.le_pullback_bind _ (fun Y f hf ‚Ü¶ (T f hf).toSieve) _ hf
    ¬∑ refine fun R hR ‚Ü¶ le_antisymm ?_ ?_
      ¬∑ refine fun Y f hf ‚Ü¶ J.transitive (J.pullback_stable f hS) _ fun Z g hg ‚Ü¶ ?_
        rw [‚Üê Sieve.pullback_comp]
        refine J.superset_covering
          (Sieve.le_pullback_bind _ (fun Y f hf ‚Ü¶ (T f hf).toSieve) _ hg) ?_
        rw [‚Üê hR _ hg]
        exact J.covering_of_eq_top <| Sieve.pullback_eq_top_of_mem _ <| R.downward_closed hf g
      ¬∑ rw [R.generate_le_iff]
        intro Y f ‚ü®Z, g, g', hg', hg, h‚ü©
        dsimp only at hg
        exact h ‚ñ∏ (hR g' hg' ‚ñ∏ hg:)

-- TODO: move to `Mathlib.CategoryTheory.Sites.Subsheaf`
lemma Subpresheaf.isSheaf_range {C : Type u} [Category.{v} C] {J : GrothendieckTopology C}
    {F F' : Sheaf J (Type w)} (f : F ‚ü∂ F') [Mono f] :
    Presieve.IsSheaf J (Subpresheaf.range f.val).toPresheaf := by
  have : Mono f.val := (sheafToPresheaf _ _).map_mono f
  exact Presieve.isSheaf_iso J (asIso (Subpresheaf.toRange f.val)) <|
    (isSheaf_iff_isSheaf_of_type J _).1 <| F.2

-- TODO: move to `Mathlib.CategoryTheory.Subpresheaf.Sieves`
lemma Subpresheaf.sieveOfSection_eq_top_iff {C : Type u} [Category.{v} C] {F : C·µí·µñ ‚•§ Type w}
    {G : Subpresheaf F} {U : C·µí·µñ} {s : F.obj U} :
    G.sieveOfSection s = ‚ä§ ‚Üî s ‚àà G.obj U := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ simpa [‚Üê Sieve.id_mem_iff_eq_top] using h
  ¬∑ ext _ f; simpa using G.map f.op h

-- TODO: move to `Mathlib.CategoryTheory.Subpresheaf.Sieves`
lemma Subpresheaf.pullback_sieveOfSection {C : Type u} [Category.{v} C] {F : C·µí·µñ ‚•§ Type w}
    {G : Subpresheaf F} {U V : C·µí·µñ} (f : U ‚ü∂ V) (s : F.obj U) :
    (G.sieveOfSection s).pullback f.unop = G.sieveOfSection (F.map f s) := by
  ext; simp

lemma Subpresheaf.isClosed_sieveOfSection {C : Type u} [Category.{v} C] {J : GrothendieckTopology C}
    {F : C·µí·µñ ‚•§ Type w} (hF : Presieve.IsSheaf J F) {G : Subpresheaf F}
    (hG : Presieve.IsSheaf J G.toPresheaf) {U : C·µí·µñ} (s : F.obj U) :
    (G.sieveOfSection s).IsClosed J :=
  fun _ f hf ‚Ü¶ (Subpresheaf.isSheaf_iff _ hF).1 hG _ _ <|
    J.superset_covering (G.pullback_sieveOfSection f.op s).le hf

/- A few lemmas for which I haven't found a better place yet.
TODO: clean up. -/
section TerminalSheaf

attribute [local instance] HasForget.hasCoeToSort
attribute [local instance] HasForget.instFunLike

/-- Evaluating a terminal functor yields terminal objects.
TODO: move somewhere else -/
noncomputable def Limits.IsTerminal.isTerminalObj_functor {C : Type u} [Category.{v} C]
    {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [HasLimits D] {F : C ‚•§ D} (hF : IsTerminal F) (X : C) :
    IsTerminal (F.obj X) :=
  hF.isTerminalObj ((evaluation C D).obj X)

/-- A terminal sheaf is also terminal as a presheaf. -/
noncomputable def Limits.IsTerminal.isTerminalSheafVal {C : Type u} [Category.{v} C]
    {J : GrothendieckTopology C} {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] [HasLimits A]
    {X : Sheaf J A} (hX : IsTerminal X) : IsTerminal X.val :=
  hX.isTerminalObj (sheafToPresheaf J A)

/-- Sections of a terminal sheaf are terminal objects. -/
noncomputable def Limits.IsTerminal.isTerminalSheafValObj {C : Type u} [Category.{v} C]
    {J : GrothendieckTopology C} {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] [HasLimits A]
    {X : Sheaf J A} (hX : IsTerminal X) (Y : C·µí·µñ) : IsTerminal (X.val.obj Y) :=
  hX.isTerminalSheafVal.isTerminalObj_functor Y

/-- For sheaves valued in a concrete category whose terminal object is a point,
sections of the terminal sheaf are unique. -/
noncomputable instance Sheaf.instUniqueTerminalValObjForget {C : Type u} [Category.{v} C]
    {J : GrothendieckTopology C} {A : Type u‚ÇÇ} [Category.{v‚ÇÇ} A] [HasLimits A]
    [HasForget.{w} A] [PreservesLimit (Functor.empty _) (forget A)] (Y : C·µí·µñ) :
    Unique ((‚ä§_ Sheaf J A).val.obj Y) :=
  (Types.isTerminalEquivUnique _).1 <|
    (terminalIsTerminal.isTerminalSheafValObj Y).isTerminalObj (forget _) _

/-- Terminal types are singletons. -/
noncomputable def Limits.IsTerminal.unique {X : Type u} (h : IsTerminal X) : Unique X :=
  Types.isTerminalEquivUnique _ h

/-- Sections of the terminal sheaf are unique. -/
noncomputable instance Sheaf.instUniqueTerminalValObj {C : Type u} [Category.{v} C]
    {J : GrothendieckTopology C}  (Y : C·µí·µñ) :
    Unique ((‚ä§_ Sheaf J (Type w)).val.obj Y) :=
  (terminalIsTerminal.isTerminalSheafValObj Y).unique

end TerminalSheaf

namespace GrothendieckTopology

/-- A specific choice of subobject classifier in the sheaf topos `Sheaf J (Type max u v)`, given
by `J.Œ©` and the morphism `‚ä§_ C ‚ü∂ J.Œ©` that picks the maximal sieve on each object. -/
noncomputable def classifier : Classifier (Sheaf J (Type max u v)) :=
  .mkOfTerminalŒ©‚ÇÄ _ terminalIsTerminal J.Œ©
    ‚ü®{ app _ := fun _ ‚Ü¶ (‚ä§ : ClosedSieve J _) }‚ü©
    (fun {F G} i _ ‚Ü¶ ‚ü®{
      app X x := ‚ü®(Subpresheaf.range i.val).sieveOfSection x, Subpresheaf.isClosed_sieveOfSection
        ((isSheaf_iff_isSheaf_of_type J _).1 <| G.2) ((Subpresheaf.isSheaf_range i)) x‚ü© }‚ü©)
    (fun {F G} i _ ‚Ü¶ by
      refine ‚ü®‚ü®by ext X x; dsimp; ext1; exact Subpresheaf.sieveOfSection_eq_top_iff.2 (by simp)‚ü©,
        ‚ü®isLimitOfReflects (sheafToPresheaf J (Type max u v)) ?_‚ü©‚ü©
      refine evaluationJointlyReflectsLimits _ fun X ‚Ü¶ ?_
      refine Nonempty.some <| (Types.isLimit_iff _).2 fun s hs ‚Ü¶ ?_
      have hs' := Subpresheaf.sieveOfSection_eq_top_iff.1 <| congrArg ClosedSieve.toSieve <|
        (hs WalkingCospan.Hom.inl).trans (hs WalkingCospan.Hom.inr).symm
      let ‚ü®x, hx, hx'‚ü© := Function.Injective.existsUnique_of_mem_range
        (by have : Mono i.val := (sheafToPresheaf J _).map_mono i; exact injective_of_mono _) hs'
      refine ‚ü®x, ?_, fun y hy ‚Ü¶ hx' y (hy WalkingCospan.left)‚ü©
      exact Option.rec (by dsimp; exact hx ‚ñ∏ hs WalkingCospan.Hom.inl) <| WalkingPair.rec hx <|
        @Subsingleton.elim _ (by dsimp; infer_instance) _ _)
    (fun {F G} i _ œá hœá ‚Ü¶ by
      ext X x; dsimp; ext Y f
      replace hœá := hœá.map (sheafToPresheaf J _ ‚ãô (evaluation _ _).obj (op Y))
      dsimp at hœá
      replace hœá : œá.val.app (op Y) (G.val.map f.op x) = (‚ä§ : ClosedSieve _ _) ‚Üî
          G.val.map f.op x ‚àà Set.range (i.val.app (op Y)) := by
        refine ‚ü®fun hy ‚Ü¶ ?_, fun hy ‚Ü¶ by simpa [hy.choose_spec] using congrFun hœá.w hy.choose‚ü©
        exact ‚ü®_, PullbackCone.IsLimit.equivPullbackObj_symm_apply_fst hœá.isLimit
          ‚ü®((G.val.map f.op x), default), hy‚ü©‚ü©
      refine ((Sieve.mem_iff_pullback_eq_top _).trans ?_).trans hœá
      rw [show œá.val.app _ _ = _ from congrFun (œá.val.naturality f.op) x, ClosedSieve.ext_iff]; rfl)

instance hasClassifier : HasClassifier (Sheaf J (Type max u v)) :=
  ‚ü®‚ü®J.classifier‚ü©‚ü©

-- TODO: move to `Mathlib.CategoryTheory.Sites.Sheaf`
lemma _root_.CategoryTheory.Presheaf.isSheaf_of_le {C : Type u} [Category.{v} C] {A : Type u‚ÇÇ}
    [Category.{v‚ÇÇ} A] {P : C·µí·µñ ‚•§ A} {J K : GrothendieckTopology C} (h : J ‚â§ K)
    (hP : Presheaf.IsSheaf K P) : Presheaf.IsSheaf J P :=
  fun X ‚Ü¶ Presieve.isSheaf_of_le _ h <| hP X

variable {J} {K : GrothendieckTopology C} (h : J ‚â§ K)

/-- The subobject classifier sheaf `K.Œ© : Sheaf K (Type max u v)` as a `J`-sheaf for `J ‚â§ K`. -/
@[simps!]
protected def Œ©' : Sheaf J (Type max u v) :=
  ‚ü®K.Œ©.val, Presheaf.isSheaf_of_le h K.Œ©.2‚ü©

/-- The inclusion of `J.Œ©' h`, the subobject classifier of `K`-sheaves viewed as a `J`-sheaf,
into `J.Œ©`, the subobject classifier of `J`-sheaves. In components this is simply the inclusion of
`K`-closed sieves into `J`-closed sieves. -/
@[simps! val_app]
def Œ©InclusionOfLE : J.Œ©' h ‚ü∂ J.Œ© :=
  ‚ü®{ app X := ClosedSieve.inclusionOfLE h (X := unop X) }‚ü©

/-- The projection of `J.Œ©`, the subobject classifier of `J`-sheaves, onto `J.Œ©' h`, the subobject
classifier of `K`-sheaves viewed as a `J`-sheaf. In components this generates `K`-closed sieves from
`J`-closed sieves. -/
@[simps! val_app]
def Œ©ProjectionOfLE : J.Œ© ‚ü∂ J.Œ©' h :=
  ‚ü®{
    app X := ClosedSieve.toClosedSieve K (X := unop X)
    naturality X Y f := by dsimp; ext; simp [Sieve.pullback_comp]
  }‚ü©

@[simp]
lemma Œ©InclusionOfLE_comp_Œ©ProjectionOfLE :
    Œ©InclusionOfLE h ‚â´ Œ©ProjectionOfLE h = ùüô (J.Œ©' h) := by
  ext; simp

instance : Mono (Œ©InclusionOfLE h) := mono_of_mono_fac (Œ©InclusionOfLE_comp_Œ©ProjectionOfLE h)

instance : Epi (Œ©ProjectionOfLE h) := epi_of_epi_fac (Œ©InclusionOfLE_comp_Œ©ProjectionOfLE h)

end GrothendieckTopology

end CategoryTheory
