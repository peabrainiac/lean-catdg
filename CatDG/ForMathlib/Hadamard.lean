import Mathlib.Analysis.Calculus.ContDiff.Operations
import Mathlib.Analysis.Calculus.LineDeriv.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral.FundThmCalculus

/-!
# Hadamard's lemma
Here we prove variants of Hadamard's lemma, stating that a smooth function `f : E ‚Üí F` between
sufficiently nice vector spaces can for any point `x` and basis `b` be written as
`y ‚Ü¶ f x + ‚àë i, b.repr (y - x) i ‚Ä¢ g i y` where `b.repr (y - x) i` is the `i`-th component of
`y - x` in the basis `b` and each `g i` is a smooth function `E ‚Üí F`. We do this by providing
explicit functions `hadamardFun f x (b i)` to serve as the `g i`, characterising their smoothness
and showing that `f` can be written in terms of them.

The functions we consider are specifically functions from finite-dimensional spaces to Banach spaces
that are continuously differentiable on an open star-convex set.

See https://en.wikipedia.org/wiki/Hadamard%27s_lemma and https://ncatlab.org/nlab/show/Hadamard+lemma.
-/

universe u

open ContDiff

variable {E F : Type u} [NormedAddCommGroup E] [NormedAddCommGroup F] [NormedSpace ‚Ñù E]
  [NormedSpace ‚Ñù F] [CompleteSpace F]

lemma ContinuousOn.intervalIntegral {X : Type*} [TopologicalSpace X] {Œº : MeasureTheory.Measure ‚Ñù}
    [MeasureTheory.NoAtoms Œº] [MeasureTheory.IsLocallyFiniteMeasure Œº] {f : X √ó ‚Ñù ‚Üí E} {u : Set X}
    {a‚ÇÄ b‚ÇÄ : ‚Ñù} (h : a‚ÇÄ ‚â§ b‚ÇÄ) (hf : ContinuousOn f (u √óÀ¢ Set.Icc a‚ÇÄ b‚ÇÄ)) :
    ContinuousOn (fun x ‚Ü¶ ‚à´ t in a‚ÇÄ..b‚ÇÄ, f (x, t) ‚àÇŒº) u := by
  rw [continuousOn_iff_continuous_restrict] at hf ‚ä¢
  replace hf :
      Continuous (Function.uncurry fun (x : u) (t : ‚Ñù) ‚Ü¶ f (x, Set.projIcc _ _ h t)) :=
    (hf.comp (f := (Homeomorph.Set.prod u _).symm ‚àò Prod.map id (Set.projIcc _ _ h))
      (by fun_prop)).congr fun (x, t) ‚Ü¶ by simp
  refine (intervalIntegral.continuous_parametric_intervalIntegral_of_continuous' hf a‚ÇÄ b‚ÇÄ).congr
    fun x ‚Ü¶ intervalIntegral.integral_congr fun t ht ‚Ü¶ ?_
  simp [Set.projIcc_of_mem h <| Set.uIcc_of_le h ‚ñ∏ ht]

open TopologicalSpace MeasureTheory Filter Topology Filter Interval in
/-- A convenient special case of `intervalIntegral.hasFDerivAt_integral_of_dominated_of_fderiv_le`:
if `f : H √ó ‚Ñù ‚Üí E` is continuously differentiable on `u √óÀ¢ Œô a b` for a neighbourhood `u` of `x‚ÇÄ`,
then a derivative of `fun x => ‚à´ t in a..b, f (x, t) ‚àÇŒº` in `x‚ÇÄ` can be computed as
`‚à´ t in a..b, fderiv ‚Ñù (fun x ‚Ü¶ f (x, t)) x‚ÇÄ ‚àÇŒº`. -/
nonrec theorem intervalIntegral.hasFDerivAt_integral_of_contDiffOn
    {Œº : Measure ‚Ñù} {E : Type*} [NormedAddCommGroup E]
    [NormedSpace ‚Ñù E] [NormedSpace ‚Ñù E] {H : Type*} [NormedAddCommGroup H]
    [NormedSpace ‚Ñù H] {a b : ‚Ñù} {f : H √ó ‚Ñù ‚Üí E} {x‚ÇÄ : H} {u : Set H} (hu : u ‚àà ùìù x‚ÇÄ)
    (hF : ContDiffOn ‚Ñù 1 f (u √óÀ¢ Set.Icc a b)) :
    HasFDerivAt (fun x => ‚à´ t in a..b, f (x, t) ‚àÇŒº)
      (‚à´ t in a..b, fderiv ‚Ñù (fun x ‚Ü¶ f (x, t)) x‚ÇÄ ‚àÇŒº) x‚ÇÄ := by
  sorry

lemma ContDiffOn.intervalIntegral {f : E √ó ‚Ñù ‚Üí F} {u : Set E} (hu : IsOpen u) {n : ‚Ñï‚àû}
    (hf : ContDiffOn ‚Ñù n f (u √óÀ¢ Set.Icc 0 1)) :
    ContDiffOn ‚Ñù n (fun x ‚Ü¶ ‚à´ t in 0..1, f (x, t)) u := by
  revert F; change ‚àÄ F : _, _
  refine ENat.nat_induction n ?_ ?_ ?_
  ¬∑ intro F _ _ _ f
    simp_rw [WithTop.coe_zero, contDiffOn_zero]
    exact ContinuousOn.intervalIntegral zero_le_one
  ¬∑ intro k h F _ _ _ f hf
    refine (contDiffOn_succ_iff_fderiv_of_isOpen (ùïú := ‚Ñù) (n := k) hu).2 ‚ü®?_, by simp, ?_‚ü©
    ¬∑ intro x hx
      have h := intervalIntegral.hasFDerivAt_integral_of_contDiffOn (Œº := MeasureTheory.volume)
        (hu.mem_nhds hx) (hf.of_le <| by simp)
      exact h.differentiableAt.differentiableWithinAt
    ¬∑ have := hf.fderivWithin (hu.uniqueDiffOn.prod <| uniqueDiffOn_Icc zero_lt_one) (m := k) le_rfl
      refine (h _ (f := fun x ‚Ü¶ (fderivWithin ‚Ñù f (u √óÀ¢ Set.Icc 0 1) x).comp (.inl ‚Ñù E ‚Ñù))
        (by fun_prop)).congr ?_
      intro x hx
      have h := intervalIntegral.hasFDerivAt_integral_of_contDiffOn (Œº := MeasureTheory.volume)
        (hu.mem_nhds hx) (hf.of_le <| by simp)
      rw [h.fderiv]
      refine intervalIntegral.integral_congr fun t ht ‚Ü¶ ?_
      rw [Set.uIcc_of_le zero_le_one] at ht
      rw [show (fun x ‚Ü¶ f (x, t)) = (f ‚àò fun x ‚Ü¶ (x, t)) by rfl]
      rw [‚Üê fderivWithin_eq_fderiv (hu.uniqueDiffWithinAt hx) (((hf.differentiableOn (by simp)).comp
        (by fun_prop) (fun x hx ‚Ü¶ ‚ü®hx, ht‚ü©)).differentiableAt (hu.mem_nhds hx))]
      rw [fderivWithin_comp _ (t := u √óÀ¢ Set.Icc 0 1) (hf.differentiableOn (by simp) _ ‚ü®hx, ht‚ü©)
        (by fun_prop) (fun x hx ‚Ü¶ ‚ü®hx, ht‚ü©) (hu.uniqueDiffWithinAt hx)]
      congr
      exact (hasFDerivAt_prodMk_left x t).hasFDerivWithinAt.fderivWithin (hu.uniqueDiffWithinAt hx)
  ¬∑ intro h F _ _ _ f hf
    exact contDiffOn_infty.2 fun n ‚Ü¶ h n F <| hf.of_le <| WithTop.coe_le_coe.2 le_top

/-- The function appearing in Hadamard's lemma applied to the function `f` at `x` for a basis
vector `b`. -/
noncomputable def hadamardFun (f : E ‚Üí F) (x b : E) : E ‚Üí F :=
    fun y ‚Ü¶ ‚à´ t in (0 : ‚Ñù)..1, lineDeriv ‚Ñù f (x + t ‚Ä¢ (y - x)) b

protected lemma ContDiffOn.hadamardFun {x : E} {s : Set E} (hs : IsOpen s) (hs' : StarConvex ‚Ñù x s)
    {f : E ‚Üí F} {n m : ‚Ñï‚àû} (hf : ContDiffOn ‚Ñù n f s) (hm : m + 1 ‚â§ n) (b : E) :
    ContDiffOn ‚Ñù m (hadamardFun f x b) s := by
  unfold hadamardFun
  refine ContDiffOn.intervalIntegral (f := fun y ‚Ü¶ lineDeriv ‚Ñù f (x + y.2 ‚Ä¢ (y.1 - x)) b) hs ?_
  refine .congr ?_ (fun y hy ‚Ü¶ DifferentiableAt.lineDeriv_eq_fderiv <|
    (hf.differentiableOn <| by simp [le_of_add_le_right hm]).differentiableAt <|
      hs.mem_nhds <| hs'.add_smul_sub_mem hy.1 hy.2.1 hy.2.2)
  refine .mono ?_ (s := (fun y : E √ó ‚Ñù ‚Ü¶ x + y.2 ‚Ä¢ (y.1 - x)) ‚Åª¬π' s)
    fun y hy ‚Ü¶ hs'.add_smul_sub_mem hy.1 hy.2.1 hy.2.2
  exact (ContinuousLinearMap.apply ‚Ñù F b).contDiff.comp_contDiffOn <|
    (hf.fderiv_of_isOpen hs <| WithTop.coe_le_coe.2 hm).comp (by fun_prop) <| s.mapsTo_preimage _

protected lemma ContDiff.hadamardFun {x : E} {f : E ‚Üí F} {n m : ‚Ñï‚àû} (hf : ContDiff ‚Ñù n f)
    (hm : m + 1 ‚â§ n) (b : E) : ContDiff ‚Ñù m (hadamardFun f x b) :=
  contDiffOn_univ.1 <| (contDiffOn_univ.2 hf).hadamardFun isOpen_univ (starConvex_univ x) hm b

open intervalIntegral in
lemma eqOn_add_sum_hadamardFun {x : E} {s : Set E} (hs : IsOpen s) (hs' : StarConvex ‚Ñù x s)
    {f : E ‚Üí F} {n : WithTop ‚Ñï‚àû} (hf : ContDiffOn ‚Ñù n f s) (hn : 1 ‚â§ n)
    {Œπ : Type*} [Fintype Œπ] (b : Module.Basis Œπ ‚Ñù E) :
    s.EqOn f (fun y ‚Ü¶ f x + ‚àë i : Œπ, b.repr (y - x) i ‚Ä¢ hadamardFun f x (b i) y) := by
  intro y hy
  have hs'' : ‚àÄ t ‚àà Set.uIcc (0 : ‚Ñù) 1, x + t ‚Ä¢ (y - x) ‚àà s := fun t ht ‚Ü¶ by
    rw [Set.uIcc_of_le zero_le_one] at ht
    exact hs'.add_smul_sub_mem hy ht.1 ht.2
  refine sub_eq_iff_eq_add'.1 <| Eq.trans (by simp) <| (integral_deriv_eq_sub
    (a := 0) (b := 1) (f := f ‚àò fun t ‚Ü¶ x + t ‚Ä¢ (y - x)) ?_ ?_).symm.trans ?_
  ¬∑ intro t ht
    have := (hf.differentiableOn hn).differentiableAt <| hs.mem_nhds <| hs'' _ ht
    fun_prop
  ¬∑ refine ContinuousOn.intervalIntegrable ?_
    exact ((hf.comp (by fun_prop) <| s.mapsTo_preimage _).continuousOn_deriv_of_isOpen
      (hs.preimage <| by fun_prop) hn).mono fun t ht ‚Ü¶ hs'' _ ht
  ¬∑ unfold hadamardFun
    simp_rw [‚Üê integral_smul]
    rw [‚Üê integral_finset_sum]
    ¬∑ refine integral_congr fun t ht ‚Ü¶ ?_
      rw [‚Üê fderiv_deriv, fderiv_comp]
      ¬∑ simp_rw [DifferentiableAt.lineDeriv_eq_fderiv <|
          (hf.differentiableOn hn).differentiableAt <| hs.mem_nhds <| hs'' _ ht]
        simp_rw [‚Üê ContinuousLinearMap.map_smul, ‚Üê map_sum]
        simp [deriv_smul_const, - map_sub]
      ¬∑ refine (hf.differentiableOn hn).differentiableAt <| hs.mem_nhds <| hs'' _ ht
      ¬∑ simp
    ¬∑ intro i _
      refine (continuousOn_const.smul ?_).intervalIntegrable
      refine .congr ?_ (fun t ht ‚Ü¶ DifferentiableAt.lineDeriv_eq_fderiv <|
          (hf.differentiableOn hn).differentiableAt <| hs.mem_nhds <| hs'' _ ht)
      refine .mono ?_  (s := (fun t ‚Ü¶ x + t ‚Ä¢ (y - x)) ‚Åª¬π' s) fun t ht ‚Ü¶ hs'' _ ht
      exact (ContinuousLinearMap.apply ‚Ñù F _).continuous.comp_continuousOn <|
        (hf.continuousOn_fderiv_of_isOpen hs hn).comp (by fun_prop) <| s.mapsTo_preimage _

lemma eq_add_sum_hadamardFun {x : E} {f : E ‚Üí F} {n : WithTop ‚Ñï‚àû} (hf : ContDiff ‚Ñù n f)
    (hn : 1 ‚â§ n) {Œπ : Type*} [Fintype Œπ] (b : Module.Basis Œπ ‚Ñù E) :
    f = (fun y ‚Ü¶ f x + ‚àë i : Œπ, b.repr (y - x) i ‚Ä¢ hadamardFun f x (b i) y) := by
  simpa using eqOn_add_sum_hadamardFun isOpen_univ (starConvex_univ x) hf.contDiffOn hn b
