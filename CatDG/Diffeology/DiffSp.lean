import Mathlib.CategoryTheory.Limits.Types.Limits
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.Topology.Category.DeltaGenerated
import Mathlib.Topology.Category.TopCat.Basic
import CatDG.Diffeology.DDiffeomorph

/-!
# Category of diffeological spaces
The category of diffeological spaces and smooth maps.
Adapted from `Mathlib.Topology.Category.TopCat.Basic`.

Main definitions / results:
* `DiffSp`: the category of diffeological spaces and smooth maps.
* `forget DiffSp`: the forgetful functor `DiffSp ‚•§ Type`,
  provided through a `ConcreteCategory`-instance on `DiffSp`.
* `DiffSp.discrete`, `DiffSp.indiscrete`: the functors `Type ‚•§ DiffSp` giving each type the
  discrete/indiscrete diffeology.
* `DiffSp.discreteForgetAdj`, `DiffSp.forgetIndiscreteAdj`: the adjunctions
  `discrete ‚ä£ forget ‚ä£ indiscrete`.
* `DiffSp.dTop`, `DiffSp.diffToDeltaGenerated`, `DiffSp.topToDiff`,
  `DiffSp.deltaGeneratedToDiff`: the functors between `DiffSp`, `DeltaGenerated` and
  `TopCat` given by the D-topology and continuous diffeology.
* `DiffSp.dTopAdj`, `DiffSp.dTopAdj'`: the adjunctions between those.
* `DiffSp.hasLimits`, `DiffSp.hasColimits`: `DiffSp` is complete and cocomplete.
* `DiffSp.forgetPreservesLimits`, `DiffSp.forgetPreservesColimits`: the forgetful functor
  `DiffSp ‚•§ Type` preserves limits and colimits.
-/

open CategoryTheory

open Topology

universe u v

section Basic

/-- The category of diffeological spaces. -/
structure DiffSp where
  private mk ::
  carrier : Type u
  [str : DiffeologicalSpace carrier]

attribute [instance] DiffSp.str

initialize_simps_projections DiffSp (-str)

namespace DiffSp

instance : CoeSort DiffSp (Type u) :=
  ‚ü®DiffSp.carrier‚ü©

attribute [coe] DiffSp.carrier

/-- The object in `DiffSp` associated to a type equipped with the appropriate
typeclasses. This is the preferred way to construct a term of `DiffSp`. -/
abbrev of (X : Type u) [DiffeologicalSpace X] : DiffSp :=
  ‚ü®X‚ü©

lemma coe_of (X : Type u) [DiffeologicalSpace X] : (of X : Type u) = X :=
  rfl

lemma of_carrier (X : DiffSp.{u}) : of X = X := rfl

variable {X} in
/-- The type of morphisms in `DiffSp`. -/
@[ext]
structure Hom (X Y : DiffSp.{u}) where
  private mk ::
  /-- The underlying `DSmoothMap`. -/
  hom' : DSmoothMap X Y

instance : Category DiffSp where
  Hom X Y := Hom X Y
  id X := ‚ü®DSmoothMap.id _‚ü©
  comp f g := ‚ü®g.hom'.comp f.hom'‚ü©

instance : ConcreteCategory.{u} DiffSp (fun X Y => DSmoothMap X Y) where
  hom := Hom.hom'
  ofHom f := ‚ü®f‚ü©

/-- Turn a morphism in `DiffSp` back into a `DSmoothMap`. -/
abbrev Hom.hom {X Y : DiffSp.{u}} (f : Hom X Y) :=
  ConcreteCategory.hom (C := DiffSp) f

/-- Typecheck a `DSmoothMap` as a morphism in `DiffSp`. -/
abbrev ofHom {X Y : Type u} [DiffeologicalSpace X] [DiffeologicalSpace Y] (f : DSmoothMap X Y) :
    of X ‚ü∂ of Y :=
  ConcreteCategory.ofHom (C := DiffSp) f

/-- Use the `ConcreteCategory.hom` projection for `@[simps]` lemmas. -/
def Hom.Simps.hom (X Y : DiffSp) (f : Hom X Y) :=
  f.hom

initialize_simps_projections Hom (hom' ‚Üí hom)

@[simp]
lemma hom_id (X : DiffSp) : (ùüô X : X ‚ü∂ X).hom = DSmoothMap.id X := rfl

@[simp]
lemma id_app (X : DiffSp) (x : ‚ÜëX) : (ùüô X : X ‚ü∂ X) x = x := rfl

@[simp]
lemma coe_id (X : DiffSp) : (ùüô X : X ‚Üí X) = id := rfl

@[simp]
lemma hom_comp {X Y Z : DiffSp} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).hom = g.hom.comp f.hom := rfl

@[simp]
lemma comp_app {X Y Z : DiffSp} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
    (f ‚â´ g : X ‚Üí Z) x = g (f x) := rfl

@[simp]
lemma coe_comp {X Y Z : DiffSp} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl

@[ext]
lemma hom_ext {X Y : DiffSp} {f g : X ‚ü∂ Y} (hf : f.hom = g.hom) : f = g :=
  Hom.ext hf

@[ext]
lemma ext {X Y : DiffSp} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=
  ConcreteCategory.hom_ext _ _ w

@[simp]
lemma hom_ofHom {X Y : Type u} [DiffeologicalSpace X] [DiffeologicalSpace Y] (f : DSmoothMap X Y) :
  (ofHom f).hom = f := rfl

@[simp]
lemma ofHom_hom {X Y : DiffSp} (f : X ‚ü∂ Y) :
    ofHom (Hom.hom f) = f := rfl

@[simp]
lemma ofHom_id {X : Type u} [DiffeologicalSpace X] : ofHom (DSmoothMap.id X) = ùüô (of X) := rfl

@[simp]
lemma ofHom_comp {X Y Z : Type u} [DiffeologicalSpace X] [DiffeologicalSpace Y]
    [DiffeologicalSpace Z] (f : DSmoothMap X Y) (g : DSmoothMap Y Z) :
    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=
  rfl

lemma ofHom_apply {X Y : Type u} [DiffeologicalSpace X] [DiffeologicalSpace Y]
    (f : DSmoothMap X Y) (x : X) :
    (ofHom f) x = f x := rfl

lemma hom_inv_id_apply {X Y : DiffSp} (f : X ‚âÖ Y) (x : X) : f.inv (f.hom x) = x := by
  simp

lemma inv_hom_id_apply {X Y : DiffSp} (f : X ‚âÖ Y) (y : Y) : f.hom (f.inv y) = y := by
  simp

@[simps!]
def homEquivDSmoothMap {X Y : DiffSp} : (X ‚ü∂ Y) ‚âÉ DSmoothMap X Y where
  toFun := Hom.hom
  invFun := ofHom
  left_inv _ := rfl
  right_inv _ := rfl

/--
Replace a function coercion for a morphism `DiffSp.of X ‚ü∂ DiffSp.of Y` with the definitionally
equal function coercion for a smooth map `DSmoothMap X Y`.
-/
@[simp] theorem coe_of_of {X Y : Type u} [DiffeologicalSpace X] [DiffeologicalSpace Y]
    {f : DSmoothMap X Y} {x} :
    @DFunLike.coe (DiffSp.of X ‚ü∂ DiffSp.of Y) ((CategoryTheory.forget DiffSp).obj (DiffSp.of X))
      (fun _ ‚Ü¶ (CategoryTheory.forget DiffSp).obj (DiffSp.of Y)) HasForget.instFunLike
      (ofHom f) x =
    @DFunLike.coe (DSmoothMap X Y) X
      (fun _ ‚Ü¶ Y) _
      f x :=
  rfl

instance inhabited : Inhabited DiffSp :=
  ‚ü®@of Empty ‚ä•‚ü©

/-- The functor equipping each type with the discrete diffeology. -/
def discrete : Type u ‚•§ DiffSp.{u} where
  obj X := @of X ‚ä•
  map f := @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) f dsmooth_bot

/-- The functor equipping each type with the indiscrete diffeology. -/
def indiscrete : Type u ‚•§ DiffSp.{u} where
  obj X := @of X ‚ä§
  map f := @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) f dsmooth_top

/-- Adjunction `discrete ‚ä£ forget`, adapted from
`Mathlib.Topology.Category.TopCat.Adjunctions`. -/
@[simps! unit counit]
def discreteForgetAdj : discrete ‚ä£ forget DiffSp.{u} :=
  Adjunction.mkOfUnitCounit
    { unit := { app := fun X ‚Ü¶ id }
      counit := { app := fun X ‚Ü¶ ‚ü®id, dsmooth_bot‚ü© } }

/-- Adjunction `forget ‚ä£ indiscrete`, adapted from
`Mathlib.Topology.Category.TopCat.Adjunctions`. -/
@[simps! unit counit]
def forgetIndiscreteAdj : forget DiffSp.{u} ‚ä£ indiscrete :=
  Adjunction.mkOfUnitCounit
    { unit := { app := fun X ‚Ü¶ ‚ü®id, dsmooth_top‚ü© }
      counit := { app := fun X ‚Ü¶ id } }

instance : Functor.IsRightAdjoint (forget DiffSp.{u}) :=
  ‚ü®_, ‚ü®discreteForgetAdj‚ü©‚ü©

instance : Functor.IsLeftAdjoint (forget DiffSp.{u}) :=
  ‚ü®_, ‚ü®forgetIndiscreteAdj‚ü©‚ü©

/-- The functor sending each diffeological spaces to its D-topology. -/
def dTop : DiffSp.{u} ‚•§ TopCat.{u} where
  obj X := @TopCat.of X DTop
  map f := @TopCat.ofHom _ _ (_) (_) <| @ContinuousMap.mk _ _ (_) (_) f f.hom.dsmooth.continuous

/-- The functor sending each diffeological space to its D-topology, as a delta-generated
space. -/
def diffToDeltaGenerated : DiffSp.{u} ‚•§ DeltaGenerated.{u} where
  obj X := ‚ü®@TopCat.of X DTop,inferInstance‚ü©
  map f := @TopCat.ofHom _ _ (_) (_) <| @ContinuousMap.mk _ _ (_) (_) f f.hom.dsmooth.continuous

/-- The functor equipping each topological space with the continuous diffeology. -/
def topToDiff : TopCat.{u} ‚•§ DiffSp.{u} where
  obj X := of (withContinuousDiffeology X)
  map f := @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) f f.hom.continuous.dsmooth

/-- The functor equipping each delta-generated space with the continuous diffeology. -/
def deltaGeneratedToDiff : DeltaGenerated.{u} ‚•§ DiffSp.{u} where
  obj X := of (withContinuousDiffeology X)
  map f := @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) f f.hom.continuous.dsmooth

/-- Adjunction between the D-topology and continuous diffeology as functors between
`DiffSp` and `TopCat`. -/
def dTopAdj : dTop ‚ä£ topToDiff :=
  Adjunction.mkOfUnitCounit {
    unit := {
      app := fun X ‚Ü¶ @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) id
        dsmooth_id.continuous.dsmooth' }
    counit := {
      app := fun X ‚Ü¶ @TopCat.ofHom _ _ (_) (_) <| @ContinuousMap.mk _ _ (_) (_) id <|
        continuous_iff_coinduced_le.mpr deltaGenerated_le } }

/-- Adjunction between the D-topology and continuous diffeology as functors between
`DiffSp` and `DeltaGenerated`. -/
def dTopAdj' : diffToDeltaGenerated ‚ä£ deltaGeneratedToDiff :=
  Adjunction.mkOfUnitCounit {
    unit := {
      app := fun X ‚Ü¶ @ofHom _ _ (_) (_) <| @DSmoothMap.mk _ _ (_) (_) id
        dsmooth_id.continuous.dsmooth' }
    counit := {
      app := fun X ‚Ü¶ @TopCat.ofHom _ _ (_) (_) <| @ContinuousMap.mk _ _ (_) (_) id <|
        continuous_iff_coinduced_le.mpr dTop_continuousDiffeology_eq_self.le } }

/-- The D-topology functor `DiffSp ‚•§ TopCat` is a left-adjoint. -/
instance : Functor.IsLeftAdjoint (dTop.{u}) :=
  ‚ü®_, ‚ü®dTopAdj‚ü©‚ü©

/-- The D-topology functor `DiffSp ‚•§ DeltaGenerated` is a left-adjoint. -/
instance : Functor.IsLeftAdjoint (diffToDeltaGenerated.{u}) :=
  ‚ü®_, ‚ü®dTopAdj'‚ü©‚ü©

end DiffSp

end Basic

namespace DiffSp

/-!
### Limits and colimits

The category of diffeological spaces is complete and cocomplete, and the forgetful functor
preserves all limits and colimits. Adapted from `Mathlib.Topology.Category.TopCat.Limits`.
-/
section Limits

open CategoryTheory.Limits

variable {J : Type v} [SmallCategory J]

local notation "forget" => forget DiffSp

/-- A specific choice of limit cone for any `F : J ‚•§ DiffSp`. -/
def limitCone (F : J ‚•§ DiffSp.{max v u}) : Cone F where
  pt := of { u : (j : J) ‚Üí F.obj j | ‚àÄ {i j : J} (f : i ‚ü∂ j), F.map f (u i) = u j }
  œÄ :=
    { app := fun j ‚Ü¶ ‚ü®fun u ‚Ü¶ u.val j,DSmooth.comp (dsmooth_apply _) (dsmooth_subtype_val)‚ü©
      naturality := fun X Y f ‚Ü¶ by
        dsimp [Category.id_comp]
        exact hom_ext <| DSmoothMap.ext fun a ‚Ü¶ (a.2 f).symm }

/-- `DiffSp.limitCone F` is actually a limit cone for the given `F : J ‚•§ DiffSp`. -/
def limitConeIsLimit (F : J ‚•§ DiffSp.{max v u}) : IsLimit (limitCone.{u,v} F) where
  lift S :=
    ‚ü®fun x ‚Ü¶ ‚ü®fun j ‚Ü¶ S.œÄ.app _ x, fun f ‚Ü¶ by dsimp; exact S.w f ‚ñ∏ rfl‚ü©,
    DSmooth.subtype_mk (dsmooth_pi fun j ‚Ü¶ (S.œÄ.app j).hom.dsmooth) fun x i j f ‚Ü¶ by
      dsimp; exact S.w f ‚ñ∏ rfl‚ü©
  fac S j := by dsimp [limitCone]; rfl
  uniq S m h := hom_ext <| DSmoothMap.ext fun a ‚Ü¶ Subtype.ext <| by simp_rw [‚Üê h]; rfl

instance hasLimitsOfSize : HasLimitsOfSize.{v,v} DiffSp.{max u v} where
  has_limits_of_shape _ := ‚ü®fun F ‚Ü¶ HasLimit.mk ‚ü®limitCone.{u,v} F,limitConeIsLimit F‚ü©‚ü©

/-- `DiffSp` has all limits, i.e. it is complete. -/
instance hasLimits : HasLimits DiffSp.{u} :=
  hasLimitsOfSize.{u,u}

noncomputable instance forgetPreservesLimitsOfSize :
    PreservesLimitsOfSize.{v,v} (forget : DiffSp.{max v u} ‚•§ _) :=
  ‚ü®‚ü®fun {F} ‚Ü¶ preservesLimit_of_preserves_limit_cone (limitConeIsLimit.{u,v} F)
      (Types.limitConeIsLimit.{v,u} (F ‚ãô forget))‚ü©‚ü©

/-- The forgetful functor `DiffSp ‚•§ Type` preserves all limits. -/
noncomputable instance forgetPreservesLimits : PreservesLimits (forget : DiffSp.{u} ‚•§ _) :=
  forgetPreservesLimitsOfSize.{u,u}

variable {F : J ‚•§ DiffSp.{u}} (c : Cocone (F ‚ãô forget))

/-- Given a functor `F : J ‚•§ DiffSp` and a cocone `c : Cocone (F ‚ãô forget)`
of the underlying cocone of types, this is the type `c.pt`
with the infimum of the diffeologies that are coinduced by the maps `c.Œπ.app j`. -/
def coconePtOfCoconeForget : Type _ := c.pt

instance diffeologicalSpaceCoconePtOfCoconeForget : DiffeologicalSpace (coconePtOfCoconeForget c) :=
  (‚®Ü j, (F.obj j).str.coinduced (c.Œπ.app j))

/-- Given a functor `F : J ‚•§ DiffSp` and a cocone `c : Cocone (F ‚ãô forget)`
of the underlying cocone of types, this is a cocone for `F` whose point is
`c.pt` with the infimum of the coinduced diffeologies by the maps `c.Œπ.app j`. -/
@[simps pt Œπ_app]
def coconeOfCoconeForget : Cocone F where
  pt := of (coconePtOfCoconeForget c)
  Œπ :=
    { app j := ofHom (DSmoothMap.mk (c.Œπ.app j) (by
        rw [dsmooth_iff_coinduced_le]
        exact le_iSup (fun j ‚Ü¶ (F.obj j).str.coinduced (c.Œπ.app j)) j))
      naturality j j' œÜ := by
        ext; apply congr_fun (c.Œπ.naturality œÜ) }

/-- Given a functor `F : J ‚•§ DiffSp` and a cocone `c : Cocone (F ‚ãô forget)`
of the underlying cocone of types, the colimit of `F` is `c.pt` equipped
with the supremum of the coinduced diffeologies by the maps `c.Œπ.app j`. -/
def isColimitCoconeOfForget (c : Cocone (F ‚ãô forget)) (hc : IsColimit c) :
    IsColimit (coconeOfCoconeForget c) := by
  refine IsColimit.ofFaithful forget (ht := hc)
    (fun s ‚Ü¶ ofHom (DSmoothMap.mk (hc.desc ((forget).mapCocone s)) ?_)) (fun _ ‚Ü¶ rfl)
  rw [dsmooth_iff_le_induced]
  dsimp [diffeologicalSpaceCoconePtOfCoconeForget]
  rw [iSup_le_iff]
  intro j
  rw [DiffeologicalSpace.coinduced_le_iff_le_induced, DiffeologicalSpace.induced_compose]
  convert dsmooth_iff_le_induced.1 (s.Œπ.app j).hom.dsmooth
  exact hc.fac ((forget).mapCocone s) j

instance hasColimitsOfSize : HasColimitsOfSize.{v,v} DiffSp.{max v u} where
  has_colimits_of_shape _ := ‚ü®fun _ ‚Ü¶ HasColimit.mk
    ‚ü®_, isColimitCoconeOfForget _ (colimit.isColimit _)‚ü©‚ü©

/-- `DiffSp` has all colimits, i.e. it is cocomplete. -/
instance hasColimits : HasColimits DiffSp.{u} :=
  hasColimitsOfSize.{u,u}

noncomputable instance forgetPreservesColimitsOfSize :
    PreservesColimitsOfSize.{v,v} (forget : DiffSp.{max v u} ‚•§ _) :=
  ‚ü®‚ü®fun {_} ‚Ü¶ preservesColimit_of_preserves_colimit_cocone
    (isColimitCoconeOfForget _ (colimit.isColimit _)) (colimit.isColimit _)‚ü©‚ü©

/-- The forgetful functor `DiffSp ‚•§ Type` preserves all colimits. -/
noncomputable instance forgetPreservesColimits : PreservesColimits (forget : DiffSp.{u} ‚•§ _) :=
  forgetPreservesColimitsOfSize.{u,u}

end Limits

/-!
### Products
Products in `DiffSp` are given by the usual products of spaces.
Adapted from `Mathlib.CategoryTheory.Limits.Shapes.Types`.
-/
section BinaryProducts

open Limits WalkingPair

/-- The product space `X √ó Y` as a cone. -/
def binaryProductCone (X Y : DiffSp.{u}) : BinaryFan X Y :=
  BinaryFan.mk (P := of (X √ó Y)) ‚ü®_,dsmooth_fst‚ü© ‚ü®_,dsmooth_snd‚ü©

/-- `DiffSp.binaryProductCone X Y` is actually a limiting cone. -/
def binaryProductLimit (X Y : DiffSp.{u}) : IsLimit (binaryProductCone X Y) where
  lift (s : BinaryFan X Y) := ‚ü®_,s.fst.hom.dsmooth.prod_mk s.snd.hom.dsmooth‚ü©
  fac _ j := Discrete.recOn j fun j ‚Ü¶ by cases j <;> rfl
  uniq s f w := hom_ext <| DSmoothMap.ext fun x ‚Ü¶ Prod.ext
    (congrFun (congrArg DSmoothMap.toFun <| congrArg Hom.hom (w ‚ü®left‚ü©)) x)
    (congrFun (congrArg DSmoothMap.toFun <| congrArg Hom.hom (w ‚ü®right‚ü©)) x)

/-- The functor taking `X`, `Y` to the product space `X √ó Y`. -/
def binaryProductFunctor : DiffSp.{u} ‚•§ DiffSp.{u} ‚•§ DiffSp.{u} where
  obj X := {
    obj := fun Y ‚Ü¶ of (X √ó Y)
    map := fun {Y Y'} f ‚Ü¶ ‚ü®_,dsmooth_id.prod_map f.hom.dsmooth‚ü© }
  map {X Y} f := {
    app := fun Z ‚Ü¶ ‚ü®_,f.hom.dsmooth.prod_map dsmooth_id‚ü©
    naturality := fun {X' Y'} f' ‚Ü¶ rfl }
  map_id := fun X ‚Ü¶ rfl
  map_comp := fun {X Y Z} f g ‚Ü¶ rfl

/-- The explicit products we defined are naturally isomorphic to the products coming from
the `HasLimits` instance on DiffSp. This is needed because the `HasLimits`
instance only stores proof that all limits exist, not the explicit constructions,
so the products derived from it are picked with the axiom of choice. -/
noncomputable def binaryProductIsoProd : binaryProductFunctor.{u} ‚âÖ (prod.functor) := by
  refine NatIso.ofComponents (fun X ‚Ü¶ ?_) (fun _ ‚Ü¶ ?_)
  ¬∑ refine NatIso.ofComponents (fun Y ‚Ü¶ ?_) (fun _ ‚Ü¶ ?_)
    ¬∑ exact ((limit.isLimit _).conePointUniqueUpToIso (binaryProductLimit X Y)).symm
    ¬∑ apply Limits.prod.hom_ext <;> simp <;> rfl
  ¬∑ ext : 2; apply Limits.prod.hom_ext <;> simp <;> rfl

/-- The one-point space as a cone. -/
def terminalCone : Cone (Functor.empty DiffSp.{u}) where
  pt := @of PUnit ‚ä§
  œÄ := (Functor.uniqueFromEmpty _).hom

/-- `DiffSp.terminalCone` is actually limiting. -/
def terminalCodeIsLimit : IsLimit terminalCone where
  lift c := ‚ü®fun _ ‚Ü¶ PUnit.unit, dsmooth_const‚ü©

end BinaryProducts

section Cartesian

instance : CartesianMonoidalCategory DiffSp :=
  .ofChosenFiniteProducts ‚ü®terminalCone, terminalCodeIsLimit‚ü©
    fun X Y ‚Ü¶ ‚ü®binaryProductCone X Y, binaryProductLimit X Y‚ü©

/-- `DiffSp` is cartesian-closed. -/
noncomputable instance cartesianClosed : CartesianClosed DiffSp.{u} where
  closed X := ‚ü®{
      obj := fun Y ‚Ü¶ DiffSp.of (DSmoothMap X Y)
      map := fun f ‚Ü¶ ‚ü®f.hom.comp,DSmoothMap.dsmooth_comp.curry_right‚ü©
    }, by exact Adjunction.mkOfHomEquiv {
      homEquiv := fun Y Z ‚Ü¶ by
        refine homEquivDSmoothMap.trans (Equiv.trans ?_ homEquivDSmoothMap.symm)
        exact (DDiffeomorph.prodComm.comp_right).toEquiv.trans
          (@DDiffeomorph.curry Y X Z _ _ _).toEquiv
      homEquiv_naturality_left_symm := fun _ _ ‚Ü¶ rfl
      homEquiv_naturality_right := fun _ _ ‚Ü¶ rfl
    }‚ü©

end Cartesian

end DiffSp
